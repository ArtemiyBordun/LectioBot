package user

import (
	"LectioBot/internal/adapter/keyboards"
	"LectioBot/internal/models"
	"LectioBot/internal/storage"
	"LectioBot/pkg/external"

	"fmt"
	"strconv"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func (u *UserData) GetProfile() {
	student, err := u.getStudent()
	if err != nil {
		return
	}

	msg := tgbotapi.NewMessage(u.ChatID, "")
	msg.ParseMode = "HTML"

	msg.Text = u.buildProfileText(student)
	msg.ReplyMarkup = keyboards.GetStartKeyboard()

	u.Ctx.Bot.Send(msg)
}

func (u *UserData) getStudent() (*models.Student, error) {
	studentRepo := storage.NewStudentRepo(u.Ctx.DB)
	student, err := studentRepo.GetStudentByChatID(u.ChatID)
	if err != nil {
		u.Ctx.Bot.Send(tgbotapi.NewMessage(u.ChatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è"))
		return nil, err
	}
	return student, nil
}

func (u *UserData) buildProfileText(student *models.Student) string {
	text := fmt.Sprintf(
		"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n–í–∞—à Chat_id: <code>%d</code>\n–ò–º—è: <i>%s</i>\n–ì—Ä—É–ø–ø–∞: <i>%s</i>\n",
		student.ChatId, student.Name, student.Group,
	)

	studentSheet := u.Ctx.Sheet.GetStudentByName(student.Name)
	if studentSheet != nil {
		text += u.buildPointsText(studentSheet)
	}

	attendanceCount := u.getAttendance(student.ChatId)
	text += "\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π: <i>" + strconv.Itoa(attendanceCount) + "</i> –∏–∑ " + strconv.Itoa(u.Ctx.Cfg.CourseConfig.TotalLectures) + "\n"

	text += "\n<tg-spoiler>–ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –ª–∏—á–Ω–æ/—á–µ—Ä–µ–∑ —á–∞—Ç –∫ —Å–≤–æ–µ–º—É <i>—Å–µ–º–∏–Ω–∞—Ä–∏—Å—Ç—É</i> –∏–ª–∏ <i>–ª–µ–∫—Ç–æ—Ä—É</i></tg-spoiler>\n"

	return text
}

func (u *UserData) buildPointsText(sheet *external.Student) string {
	text := fmt.Sprintf(
		"\nüìä –ë–∞–ª–ª—ã –ø–æ –û–ü: %d/%d\n",
		int(sheet.PointsOP), int(u.Ctx.Cfg.CourseConfig.MaxPoints),
	)

	remainingOP := int(u.Ctx.Cfg.CourseConfig.MinPointsOPForPass) - int(sheet.PointsOP)
	if remainingOP <= 0 {
		text += "‚úÖ –î–æ–ø—É—Å–∫ –∫ –∑–∞—á–µ—Ç—É/—ç–∫–∑–∞–º–µ–Ω—É –ø–æ–ª—É—á–µ–Ω!\n"
	} else {
		text += fmt.Sprintf("‚ö†Ô∏è –î–ª—è –¥–æ–ø—É—Å–∫–∞ –∫ –∑–∞—á–µ—Ç—É/—ç–∫–∑–∞–º–µ–Ω—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –µ—â—ë <i>%d</i> –±–∞–ª–ª–æ–≤\n", remainingOP)
	}

	if sheet.PointsOOP != -1 {
		text += fmt.Sprintf(
			"üìä –ë–∞–ª–ª—ã –ø–æ –û–û–ü: %d/%d\n",
			int(sheet.PointsOOP), int(u.Ctx.Cfg.CourseConfig.MaxPoints),
		)

		remainingOOP := int(u.Ctx.Cfg.CourseConfig.MinPointsOOPForPass) - int(sheet.PointsOOP)
		if remainingOOP <= 0 {
			text += "‚úÖ –î–æ–ø—É—Å–∫ –∫ —ç–∫–∑–∞–º–µ–Ω—É –ø–æ –û–û–ü –ø–æ–ª—É—á–µ–Ω!\n"
		} else {
			text += fmt.Sprintf("‚ö†Ô∏è –î–ª—è –¥–æ–ø—É—Å–∫–∞ –∫ —ç–∫–∑–∞–º–µ–Ω—É –ø–æ –û–û–ü –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –µ—â—ë <i>%d</i> –±–∞–ª–ª–æ–≤\n", remainingOOP)
		}
	}

	return text
}

func (u *UserData) getAttendance(chatID int64) int {
	attendanceRepo := storage.NewAttendanceRepo(u.Ctx.DB)
	count, err := attendanceRepo.GetStudentAttendanceCount(chatID)
	if err != nil {
		u.Ctx.Bot.Send(tgbotapi.NewMessage(u.ChatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏"))
		return 0
	}
	return int(count)
}

func (u *UserData) GetHistory() {
	lectureRepo := storage.NewLectureRepo(u.Ctx.DB)
	attendanceRepo := storage.NewAttendanceRepo(u.Ctx.DB)

	lectures, err := lectureRepo.GetAll()
	if err != nil {
		u.Ctx.Bot.Send(tgbotapi.NewMessage(u.ChatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–µ–∫—Ü–∏–π"))
		return
	}

	records, err := attendanceRepo.GetStudentAttendance(u.ChatID)
	if err != nil {
		u.Ctx.Bot.Send(tgbotapi.NewMessage(u.ChatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–µ—â–µ–Ω–∏–π"))
		return
	}

	attended := make(map[int]bool)
	for _, rec := range records {
		attended[rec.LectureId] = true
	}

	history := "üïí –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–µ—â–µ–Ω–∏–π:\n\n"
	for i, l := range lectures {
		status := "‚ùå"
		if attended[l.Id] {
			status = "‚úÖ"
		}
		history += fmt.Sprintf("–õ–µ–∫—Ü–∏—è %d (%s) ‚Äì %s\n", i+1, l.Date, status)
	}

	u.Ctx.Bot.Send(tgbotapi.NewMessage(u.ChatID, history))
}
